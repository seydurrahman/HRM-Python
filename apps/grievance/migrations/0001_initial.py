# Generated by Django 5.2.7 on 2025-10-21 02:15

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('employees', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='GrievanceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('escalation_level', models.IntegerField(default=1, help_text='Level at which this grievance should be escalated')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Grievance Categories',
                'db_table': 'grievance_categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Grievance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grievance_id', models.CharField(editable=False, max_length=50, unique=True)),
                ('subject', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('against_person', models.CharField(blank=True, help_text='Name of person the grievance is against (if applicable)', max_length=200, null=True)),
                ('incident_date', models.DateField(blank=True, help_text='Date when the incident occurred', null=True)),
                ('incident_location', models.CharField(blank=True, max_length=200, null=True)),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('URGENT', 'Urgent')], default='MEDIUM', max_length=20)),
                ('status', models.CharField(choices=[('SUBMITTED', 'Submitted'), ('ACKNOWLEDGED', 'Acknowledged'), ('UNDER_REVIEW', 'Under Review'), ('INVESTIGATING', 'Investigating'), ('RESOLVED', 'Resolved'), ('CLOSED', 'Closed'), ('ESCALATED', 'Escalated')], default='SUBMITTED', max_length=20)),
                ('is_anonymous', models.BooleanField(default=False, help_text='Keep complainant identity anonymous')),
                ('submitted_date', models.DateTimeField(auto_now_add=True)),
                ('acknowledged_date', models.DateTimeField(blank=True, null=True)),
                ('target_resolution_date', models.DateField(blank=True, null=True)),
                ('resolved_date', models.DateTimeField(blank=True, null=True)),
                ('closed_date', models.DateTimeField(blank=True, null=True)),
                ('assigned_date', models.DateTimeField(blank=True, null=True)),
                ('investigation_summary', models.TextField(blank=True, null=True)),
                ('resolution', models.TextField(blank=True, null=True)),
                ('action_taken', models.TextField(blank=True, null=True)),
                ('is_satisfied', models.BooleanField(blank=True, help_text='Is employee satisfied with resolution?', null=True)),
                ('satisfaction_comments', models.TextField(blank=True, null=True)),
                ('satisfaction_rating', models.IntegerField(blank=True, help_text='Rating from 1-5', null=True)),
                ('supporting_document', models.FileField(blank=True, null=True, upload_to='grievance_documents/')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_grievances', to='employees.employee')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grievances', to='employees.employee')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='grievances', to='grievance.grievancecategory')),
            ],
            options={
                'db_table': 'grievances',
                'ordering': ['-submitted_date'],
            },
        ),
        migrations.CreateModel(
            name='DisciplinaryAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_id', models.CharField(editable=False, max_length=50, unique=True)),
                ('action_type', models.CharField(choices=[('VERBAL_WARNING', 'Verbal Warning'), ('WRITTEN_WARNING', 'Written Warning'), ('FINAL_WARNING', 'Final Warning'), ('SUSPENSION', 'Suspension'), ('DEMOTION', 'Demotion'), ('SALARY_DEDUCTION', 'Salary Deduction'), ('TERMINATION', 'Termination'), ('OTHER', 'Other')], max_length=20)),
                ('severity', models.CharField(choices=[('MINOR', 'Minor'), ('MODERATE', 'Moderate'), ('MAJOR', 'Major'), ('SEVERE', 'Severe')], default='MODERATE', max_length=20)),
                ('violation_type', models.CharField(help_text='Type of policy violation or misconduct', max_length=200)),
                ('reason', models.TextField(help_text='Detailed reason for disciplinary action')),
                ('incident_date', models.DateField(help_text='Date of the incident')),
                ('action_date', models.DateField(help_text='Date action was taken')),
                ('effective_date', models.DateField(help_text='Date when action becomes effective')),
                ('end_date', models.DateField(blank=True, help_text='End date for temporary actions (e.g., suspension)', null=True)),
                ('duration_days', models.IntegerField(blank=True, help_text='Duration in days for temporary actions', null=True)),
                ('salary_deduction_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('supporting_document', models.FileField(blank=True, null=True, upload_to='disciplinary_documents/')),
                ('employee_acknowledgment', models.TextField(blank=True, help_text="Employee's acknowledgment or response", null=True)),
                ('acknowledged_date', models.DateField(blank=True, null=True)),
                ('is_appealed', models.BooleanField(default=False)),
                ('appeal_notes', models.TextField(blank=True, null=True)),
                ('appeal_outcome', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='disciplinary_actions', to='employees.employee')),
                ('issued_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='issued_actions', to='employees.employee')),
                ('related_grievance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='disciplinary_actions', to='grievance.grievance')),
            ],
            options={
                'db_table': 'disciplinary_actions',
                'ordering': ['-action_date'],
            },
        ),
        migrations.CreateModel(
            name='GrievanceComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('is_internal', models.BooleanField(default=False, help_text='Internal comment not visible to complainant')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('commented_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='employees.employee')),
                ('grievance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='grievance.grievance')),
            ],
            options={
                'db_table': 'grievance_comments',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='GrievanceEscalation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField()),
                ('escalation_level', models.IntegerField(default=1)),
                ('escalated_date', models.DateTimeField(auto_now_add=True)),
                ('escalated_from', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='escalations_made', to='employees.employee')),
                ('escalated_to', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='escalations_received', to='employees.employee')),
                ('grievance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='escalations', to='grievance.grievance')),
            ],
            options={
                'db_table': 'grievance_escalations',
                'ordering': ['-escalated_date'],
            },
        ),
        migrations.CreateModel(
            name='PolicyViolation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('violation_type', models.CharField(choices=[('ATTENDANCE', 'Attendance Policy'), ('CODE_OF_CONDUCT', 'Code of Conduct'), ('HARASSMENT', 'Harassment'), ('DISCRIMINATION', 'Discrimination'), ('THEFT', 'Theft/Misappropriation'), ('INSUBORDINATION', 'Insubordination'), ('POOR_PERFORMANCE', 'Poor Performance'), ('SAFETY', 'Safety Violation'), ('CONFIDENTIALITY', 'Confidentiality Breach'), ('OTHER', 'Other')], max_length=30)),
                ('description', models.TextField()),
                ('violation_date', models.DateField()),
                ('reported_date', models.DateTimeField(auto_now_add=True)),
                ('disciplinary_action', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='violations', to='grievance.disciplinaryaction')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='policy_violations', to='employees.employee')),
                ('reported_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reported_violations', to='employees.employee')),
            ],
            options={
                'db_table': 'policy_violations',
                'ordering': ['-violation_date'],
            },
        ),
        migrations.AddIndex(
            model_name='disciplinaryaction',
            index=models.Index(fields=['employee', 'action_date'], name='disciplinar_employe_87b406_idx'),
        ),
        migrations.AddIndex(
            model_name='disciplinaryaction',
            index=models.Index(fields=['action_type'], name='disciplinar_action__8889fc_idx'),
        ),
        migrations.AddIndex(
            model_name='grievance',
            index=models.Index(fields=['employee', 'status'], name='grievances_employe_f98cd3_idx'),
        ),
        migrations.AddIndex(
            model_name='grievance',
            index=models.Index(fields=['status', 'priority'], name='grievances_status_ce41c2_idx'),
        ),
        migrations.AddIndex(
            model_name='grievance',
            index=models.Index(fields=['submitted_date'], name='grievances_submitt_7e2a44_idx'),
        ),
    ]
